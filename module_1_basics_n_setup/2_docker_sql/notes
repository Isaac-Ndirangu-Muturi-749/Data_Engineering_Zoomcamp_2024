docker run -it \
-e POSTGRES_USER="root" \
-e POSTGRES_PASSWORD="root" \
-e POSTGRES_DB="ny_taxi" \
-v $(pwd)/ny_taxi_postgres_data:/var/lib/postgresql/data \
-p 5432:5432 \
postgres:13


pgcli -h localhost -p 5432 -u root -d ny_taxi


docker pull dpage/pgadmin4


docker run -it \
-e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
-e PGADMIN_DEFAULT_PASSWORD="root" \
-p 8080:80 \
dpage/pgadmin4


docker network create pg-network

docker run -it \
-e POSTGRES_USER="root" \
-e POSTGRES_PASSWORD="root" \
-e POSTGRES_DB="ny_taxi" \
-v $(pwd)/ny_taxi_postgres_data:/var/lib/postgresql/data \
-p 5432:5432 \
--network=pg-network \
--name pg-database \
postgres:13


docker run -it \
-e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
-e PGADMIN_DEFAULT_PASSWORD="root" \
-p 8080:80 \
--network=pg-network \
--name pgadmin \
dpage/pgadmin4


jupyter nbconvert --to=script upload-data.ipynb



URL="https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz"
python ingest_data.py \
--user=root \
--password=root \
--host=localhost \
--port=5432 \
--db=ny_taxi \
--table_name=yellow_taxi_trips \
--url=${URL}



docker build -t taxi_ingest:v001 .


URL="http://127.0.0.1:8000/yellow_tripdata_2021-01.csv.gz"

URL="https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz"
docker run -it \
--network=pg-network \
taxi_ingest:v001 \
--user=root \
--password=root \
--host=pg-database \
--port=5432 \
--db=ny_taxi \
--table_name=yellow_taxi_trips \
--url=${URL}



python -m http.server
http://localhost:8000/yellow_tripdata_2021-01.csv

http://127.0.0.1:8000/yellow_tripdata_2021-01.csv

http://127.0.0.1:8000/yellow_tripdata_2021-01.csv.gz


Overview of Docker Compose
Compose is a tool for defining and running multi-container Docker applications. With Compose,
you use a YAML file to configure your application's services. Then, with a single command, you
create and start all the services from your configuration.

docker volume create dtc_postgres_volume_local



https://d37ci6vzurychx.cloudfront.net/misc/taxi+_zone_lookup.csv


!wget https://d37ci6vzurychx.cloudfront.net/misc/taxi+_zone_lookup.csv

docker-compose up

SELECT
    *
FROM
    yellow_taxi_trips t,
    zones zpu,
    zones zdo
WHERE
    t."PULocationID" = zpu."LocationID" AND
    t."DOLocationID" = zdo."LocationID"
LIMIT
    100;


SELECT
    tpep_pickup_datetime,
    tpep_dropoff_datetime,
    total_amount,
    CONCAT(zpu."Borough", ' / ',zpu."Zone") AS "pickup_loc",
    CONCAT(zdo."Borough", ' / ',zdo."Zone") AS "dropoff_loc"

FROM
    yellow_taxi_trips t JOIN zones zpu
        ON t."PULocationID" = zpu."LocationID"
    JOIN zones zdo
        ON t."DOLocationID" = zdo."LocationID"

FROM
    yellow_taxi_trips t
WHERE
    "PULocationID" NOT IN (SELECT "LocationID" FROM zones)


SELECT
    tpep_pickup_datetime,
    tpep_dropoff_datetime,
    "PULocationID",
    "DOLocationID"
FROM
    yellow_taxi_trips t
LIMIT 100;


DELETE FROM zones WHERE "LocationID" = 142;

DATE_TRUNC('DAY', tpep_dropoff_datetime),

CAST(tpep_dropoff_datetime AS DATE),


SELECT
    CAST(tpep_dropoff_datetime AS DATE) as "day",
    COUNT(1)
    MAX(total_amount),
    MAX(passenger_count)
FROM
    yellow_taxi_trips t
GROUP BY
    CAST(tpep_dropoff_datetime AS DATE)
ORDER BY
    "day" ASC
LIMIT
    100;




SELECT
    CAST(tpep_dropoff_datetime AS DATE) as "day",
    "DOLocationID",
    COUNT(1) AS "count",
    MAX(total_amount) AS "max_amount",
    MAX(passenger_count) AS "max_passengers"
FROM
    yellow_taxi_trips t
GROUP BY
    1, 2
ORDER BY
    "day" ASC,
    "DOLocationID" ASC
LIMIT
    100;

